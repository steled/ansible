---
# file: deploy_ssh.yml

- name: deploy_ssh
  #hosts: "{{ var_host }}"
  hosts: picluster-client
  remote_user: deploy
  become: yes
  become_method: sudo
  vars_files:
    - users.yml

  tasks:
    - name: deploy local users
      user:
        name: "{{ item.name }}"
        password: "*"
        state: "{{ item.state }}"
        force: yes
        create_home: yes
        home: "/tmp/{{ item.name }}"
        shell: "/bin/bash"
        groups: sudo
        append: yes
      with_items:
        - "{{ users }}"

    - name: add deployed users to the sudoers
      copy:
        content: "{{ item.name }}  ALL=(ALL)  NOPASSWD: ALL"
        dest: "/etc/sudoers.d/{{ item.name }}"
      with_items:
        - "{{ users }}"
      when:
        - item.state == "present"

    - name: remove deployed users from the sudoers
      file:
        path: "/etc/sudoers.d/{{ item.name }}"
        state: absent
      with_items:
        - "{{ users }}"
      when:
        - item.state == "absent"

    - name: deploy ssh keys
      authorized_key:
        user: "{{ item.name }}"
        key: "{{ lookup('file', '/home/{{ item.name }}/.ssh/authorized_keys') }}"
        manage_dir: no
        path: "/etc/ssh/authorized_keys"
        state: "{{ item.state }}"
      with_items:
        - "{{ users }}"

    - stat:
        path: /etc/ssh/authorized_keys
      register:
        - auth_keys

    - name: create authorized_keys file
      file:
        path: /etc/ssh/authorized_keys
        state: touch
        owner: root
        group: root
        mode: 0644
      when:
        - auth_keys.stat.pw_name != "root"

    - name: enable ssh AuthorizedKeysFile
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#AuthorizedKeysFile"
        line: "AuthorizedKeysFile      /etc/ssh/authorized_keys"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

    - name: enable ssh PubkeyAuthentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#PubkeyAuthentication yes"
        line: "PubkeyAuthentication yes"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

    - name: disable ssh PasswordAuthentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#PasswordAuthentication yes"
        line: "PasswordAuthentication no"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

    - name: enable ssh PasswordAuthentication for user deploy
      lineinfile:
        path: /etc/ssh/sshd_config
        insertafter: EOF
        line: "{{ item }}"
        state: present
        backup: yes
      with_items:
        - "Match User deploy"
        - "        PasswordAuthentication yes"
      notify:
        - restart ssh

    - name: disable ssh UsePAM
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^UsePAM yes"
        line: "UsePAM no"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

    - name: disable ssh PermitEmptyPasswords
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#PermitEmptyPasswords no"
        line: "PermitEmptyPasswords no"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

    - name: disable ssh PermitRootLogin
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#PermitRootLogin prohibit-password"
        line: "PermitRootLogin prohibit-password"
        state: present
        backrefs: yes
        backup: yes
      notify:
        - restart ssh

  handlers:
    - name: restart ssh
      service:
        name: sshd
        state: restarted